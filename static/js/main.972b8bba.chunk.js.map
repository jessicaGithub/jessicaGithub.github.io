{"version":3,"sources":["Videos/Sunset.mp4","Sections/ComingSoonSection.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ComingSoonSection","className","CssBaseline","Fade","in","timeout","autoPlay","muted","loop","src","sunsetVideo","type","Container","component","maxWidth","Typography","variant","color","Date","getFullYear","theme","createMuiTheme","typography","fontFamily","join","h1","h2","fontSize","h3","h4","App","ThemeProvider","exact","path","ComingSoon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,oC,qRC6C5BC,MAnCf,WACI,OACI,yBAAKC,UAAU,QACX,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KACrB,2BAAOC,UAAQ,EAACC,OAAK,EAACC,MAAI,EAACP,UAAU,WACjC,4BAAQQ,IAAKC,IAAaC,KAAK,gBAGvC,kBAACR,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KACrB,kBAACO,EAAA,EAAD,CAAWC,UAAU,OAAOZ,UAAU,OAAOa,SAAS,MAClD,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAU,MAAnC,eAGA,kBAACE,EAAA,EAAD,CAAYC,QAAQ,YAAYH,UAAU,KAA1C,+EAMR,kBAACV,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KACrB,4BAAQJ,UAAU,UACd,kBAACW,EAAA,EAAD,CAAWE,SAAS,MAChB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,iBAC7B,iCACA,IAAIC,MAAOC,cACX,UC3BvBC,EAAQC,YAAe,CACzBC,WAAY,CACRC,WAAY,CAAC,SAAU,mBAAoB,QAAS,cAAcC,KAC9D,KAEJC,GAAI,CACAF,WAAY,CAAC,aAAc,WAAWC,KAAK,MAE/CE,GAAI,CACAH,WAAY,CAAC,aAAc,WAAWC,KAAK,KAC3CG,SAAU,SACV,2BAA4B,CACxBA,SAAU,QAEd,4BAA6B,CACzBA,SAAU,SAGlBC,GAAI,CACAL,WAAY,CAAC,aAAc,WAAWC,KAAK,MAE/CK,GAAI,CACAN,WAAY,CAAC,aAAc,WAAWC,KAAK,SAKxC,SAASM,IACpB,OACI,kBAACC,EAAA,EAAD,CAAeX,MAAOA,GAClB,kBAAC,IAAD,KACI,6BAcI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,KACd,kBAACC,EAAD,WAkB5B,SAASA,IACL,OACI,yBAAKjC,UAAU,cACX,kBAAC,EAAD,OCjEQkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.972b8bba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Sunset.d4cf9deb.mp4\";","import React from 'react'\nimport './ComingSoonSection.scss'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Typography from '@material-ui/core/Typography'\nimport Container from '@material-ui/core/Container'\n\nimport sunsetVideo from '../Videos/Sunset.mp4'\nimport { Fade } from '@material-ui/core'\n\nfunction ComingSoonSection() {\n    return (\n        <div className=\"root\">\n            <CssBaseline />\n            <Fade in={true} timeout={500}>\n                <video autoPlay muted loop className=\"videoBg\">\n                    <source src={sunsetVideo} type=\"video/mp4\" />\n                </video>\n            </Fade>\n            <Fade in={true} timeout={3000}>\n                <Container component=\"main\" className=\"main\" maxWidth=\"sm\">\n                    <Typography variant=\"h2\" component=\"h1\">\n                        Coming Soon\n                    </Typography>\n                    <Typography variant=\"subtitle1\" component=\"p\">\n                        Hello! Sorry but this portfolio is still in the making..\n                        Check back soon!\n                    </Typography>\n                </Container>\n            </Fade>\n            <Fade in={true} timeout={1000}>\n                <footer className=\"footer\">\n                    <Container maxWidth=\"sm\">\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                            {'Copyright Â© Jessica Jeong '}\n                            {new Date().getFullYear()}\n                            {'.'}\n                        </Typography>\n                    </Container>\n                </footer>\n            </Fade>\n        </div>\n    )\n}\n\nexport default ComingSoonSection\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles'\nimport './App.scss'\n\nimport ComingSoonSection from './Sections/ComingSoonSection'\n// import WelcomeSection from './Sections/WelcomeSection'\n\nconst theme = createMuiTheme({\n    typography: {\n        fontFamily: ['Roboto', '\"Helvetica Neue\"', 'Arial', 'sans-serif'].join(\n            ','\n        ),\n        h1: {\n            fontFamily: ['Bebas Neue', 'cursive'].join(','),\n        },\n        h2: {\n            fontFamily: ['Bebas Neue', 'cursive'].join(','),\n            fontSize: '2.5rem',\n            '@media (min-width:600px)': {\n                fontSize: '4rem',\n            },\n            '@media (min-width:1200px)': {\n                fontSize: '5rem',\n            },\n        },\n        h3: {\n            fontFamily: ['Bebas Neue', 'cursive'].join(','),\n        },\n        h4: {\n            fontFamily: ['Bebas Neue', 'cursive'].join(','),\n        },\n    },\n})\n\nexport default function App() {\n    return (\n        <ThemeProvider theme={theme}>\n            <Router>\n                <div>\n                    {/* <ul>\n                    <li>\n                        <Link to=\"/\">Home</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/about\">About</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/projects\">Projects</Link>\n                    </li>\n                </ul>\n\n                <hr /> */}\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <ComingSoon />\n                        </Route>\n                        {/* <Route exact path=\"/\">\n                        <Home />\n                    </Route>\n                    <Route path=\"/about\">\n                        <About />\n                    </Route>\n                    <Route path=\"/Projects\">\n                        <Projects />\n                    </Route> */}\n                    </Switch>\n                </div>\n            </Router>\n        </ThemeProvider>\n    )\n}\n\nfunction ComingSoon() {\n    return (\n        <div className=\"comingsoon\">\n            <ComingSoonSection />\n        </div>\n    )\n}\n\n// function Home() {\n//     return (\n//         <div className=\"homepage\">\n//             <h2>Home</h2>\n//         </div>\n//     )\n// }\n\n// function About() {\n//     return (\n//         <div>\n//             <h2>About</h2>\n//         </div>\n//     )\n// }\n\n// function Projects() {\n//     return (\n//         <div>\n//             <h2>Projects</h2>\n//         </div>\n//     )\n// }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}